Algorithm 
Dynamic-0-1-knapsack (v, w, n, W) 
for w = 0 to W do 
c[0, w] = 0 
for i = 1 to n do 
c[i, 0] = 0 
for w = 1 to W do 
if wi â‰¤ w then 
if vi + c[i-1, w-wi] then 
c[i, w] = vi + c[i-1, w-wi] 
else c[i, w] = c[i-1, w] 
else 
c[i, w] = c[i-1 set of items to take can be deduced from the table, starting at c[n, w] and tracing backwards where the optimal values came from. 
If c[i, w] = c[i-1, w], then item i is not part of the solution, and we continue tracing with c[i-1, w]. Otherwise, item i is part of the solution, and we continue tracing with c[i-1, w-W]. 
